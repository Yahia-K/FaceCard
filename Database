CREATE DATABASE FaceCardDB;
USE FaceCardDB;

CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('parent', 'admin') NOT NULL,
    reset_token VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    parent_id INT,
    full_name VARCHAR(255) NOT NULL,
    age INT NOT NULL,
    student_photo VARCHAR(255),
    FOREIGN KEY (parent_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

CREATE TABLE FacialRecognitionData (
    student_id INT PRIMARY KEY,
    face_encoding TEXT NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE
);

CREATE TABLE Items (
    item_id INT AUTO_INCREMENT PRIMARY KEY,
    item_name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    category VARCHAR(100),
    available_stock INT DEFAULT 0
);

CREATE TABLE Preferences (
    preference_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    allergy_info TEXT,
    daily_spending_limit DECIMAL(10,2) DEFAULT 0.00,
    FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE
);

CREATE TABLE Allergies (
    allergy_id INT AUTO_INCREMENT PRIMARY KEY,
    allergy_name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE Student_Allergies (
    student_id INT,
    allergy_id INT,
    PRIMARY KEY (student_id, allergy_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (allergy_id) REFERENCES Allergies(allergy_id) ON DELETE CASCADE
);

CREATE TABLE Item_Allergies (
    item_id INT,
    allergy_id INT,
    PRIMARY KEY (item_id, allergy_id),
    FOREIGN KEY (item_id) REFERENCES Items(item_id) ON DELETE CASCADE,
    FOREIGN KEY (allergy_id) REFERENCES Allergies(allergy_id) ON DELETE CASCADE
);


CREATE TABLE POS_Terminals (
    terminal_id INT AUTO_INCREMENT PRIMARY KEY,
    location VARCHAR(255) NOT NULL,
    status ENUM('active', 'inactive') DEFAULT 'active'
);


CREATE TABLE Transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    item_id INT,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES Items(item_id),
    CONSTRAINT chk_allergy_restriction CHECK (NOT EXISTS (
        SELECT 1 FROM Student_Allergies sa 
        JOIN Item_Allergies ia ON sa.allergy_id = ia.allergy_id 
        WHERE sa.student_id = student_id AND ia.item_id = item_id
    ))
);

CREATE TABLE PaymentMethods (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    parent_id INT,
    payment_type ENUM('Credit Card', 'PayPal', 'Stripe') NOT NULL,
    payment_details VARCHAR(255) NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

-- for  Parent to Add, Remove & Edit Students
ALTER TABLE Students ADD CONSTRAINT fk_student_parent FOREIGN KEY (parent_id) REFERENCES Users(user_id) ON DELETE CASCADE;
ALTER TABLE Students ADD COLUMN last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

-- for  Editing Parents Info
ALTER TABLE Users ADD COLUMN last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
